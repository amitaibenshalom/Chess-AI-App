@startuml
class com.example.chess2.User {
- String username
- long rating
+ <<Create>> User(String,long)
+ String getUsername()
+ long getRating()
+ void setUsername(String)
+ void setRating(long)
}
class com.example.chess2.LoginActivity {
- DatabaseReference databaseReference
- EditText userName
- Button login
- FirebaseAuth mAuth
# void onCreate(Bundle)
+ void login()
+ boolean checkIfValid()
+ void loginAuth(String,String)
+ void onClick(View)
}
class com.example.chess2.LoginSignupActivity {
- Button loginBtn
- TextToSpeech textToSpeech
# void onCreate(Bundle)
+ void onClick(View)
}
class com.example.chess2.GamesActivity {
- Button multiplayerBtn
- ImageButton backBtn
- String pUserName
# void onCreate(Bundle)
+ void onClick(View)
}
class com.example.chess2.Queen {
~ <<Create>> Queen(Point,int)
+ ArrayList<Point> availableMoves(GameManager)
}
class com.example.chess2.RoomsActivity {
- ListView listView
- Button createRoomBtn
- List<String> roomsList
- String pUserName
- String roomName
- ImageButton btnBack
~ FirebaseDatabase database
~ DatabaseReference roomRef
~ DatabaseReference roomsRef
# void onCreate(Bundle)
- void addRoomEventListener()
- void addRoomsEventListener()
}
class com.example.chess2.GameManager {
- Piece[][] board
- int turn
- int SIZE
- Point clickedPoint
- Player[] players
- int colorOwned
- double[][] weightWP
- double[][] weightBP
- double[][] weightQB
- double[][] weightWK
- double[][] weightBK
- double[][] weightN
- double[][] weightR
+ <<Create>> GameManager(int)
+ <<Create>> GameManager()
+ int getColorOwned()
+ Piece getPiece(Point)
+ Piece getPiece(int,int)
+ void setPiece(Point,Piece)
+ void setPiece(int,int,Piece)
+ boolean isCheckmated(int)
+ int getTurn()
+ Piece[][] getBoard()
+ Player[] getPlayers()
+ Point getClickedPoint()
+ void setClickedPoint(Point)
+ int getSwitchedTurn(int)
+ void switchTurn()
+ void printBoard()
+ int getValueBoard0()
+ int getValueBoard()
+ int getValueBoard2()
}
class com.example.chess2.TwoPlayerActivity {
- Button back
- Button restart
- ImageButton[][] boardImg
- int SIZE
- GameManager board
- TextView turnText
- Handler handler
- Dialog dialog
+ int promotedIndex
# void onCreate(Bundle)
+ boolean onTouchEvent(MotionEvent)
+ void restart()
+ void onBackPressed()
+ void gameEnded(int)
+ void onClick(View)
+ void resetImgBoard()
+ void promotePawn(Pawn)
- void promotePawnInBoard(Pawn)
}
class com.example.chess2.Song {
- long ID
- String title
+ <<Create>> Song(long,String)
+ long getId()
+ String getTitle()
+ String toSring()
}
class com.example.chess2.Player {
- int color
- ArrayList<Piece> pieces
- King ownKing
+ <<Create>> Player(int,GameManager)
+ int getColor()
+ King getKing()
+ ArrayList<Piece> getPieces()
}
class com.example.chess2.Rook {
- boolean isMoved
~ <<Create>> Rook(Point,int)
+ boolean isMoved()
+ void setMoved(boolean)
+ ArrayList<Point> availableMoves(GameManager)
}
class com.example.chess2.MainActivity {
~ FirebaseDatabase database
~ DatabaseReference usersRef
- DatabaseReference databaseReference
- Button startBtn
- TextView userText
- TextToSpeech textToSpeech
- FirebaseAuth mAuth
- boolean loggedIn
- Dialog dialog
- Handler handler
+ User currentUserData
+ User[] bestUsers
- Switch switchMusic
+ {static} MusicService musicService
- Intent playIntent
- ServiceConnection musicConnection
# void onCreate(Bundle)
+ boolean onCreateOptionsMenu(Menu)
+ boolean onOptionsItemSelected(MenuItem)
+ void onBackPressed()
+ void onClick(View)
+ void leaderboard()
+ void addUsersEventListener()
+ void setRatingTextListener()
+ void setUserNameText()
+ void createRulesDialog()
}
class com.example.chess2.SignUpActivity {
- EditText userName
- Button register
- ImageButton contactBtn
- FirebaseAuth mAuth
- DatabaseReference databaseReference
- {static} int RESULTPICK
# void onCreate(Bundle)
# void onStart()
+ void register()
+ void registerAuth(String,String)
+ boolean checkIfValid()
+ void onClick(View)
# void onActivityResult(int,int,Intent)
}
class com.example.chess2.Bishop {
~ <<Create>> Bishop(Point,int)
+ ArrayList<Point> availableMoves(GameManager)
}
class com.example.chess2.Piece {
- Point place
- int color
- int value
+ <<Create>> Piece(Point,int,int)
+ Point getPlace()
+ void setPlace(Point)
+ int getColor()
+ void setColor(int)
+ int getValue()
+ ArrayList<Point> availableMoves(GameManager)
+ ArrayList<Point> availableMoves2(GameManager)
+ boolean isThreatened(GameManager)
+ boolean isThreatenedNoCastling(GameManager)
+ boolean isThreatenedNoKing(GameManager)
}
class com.example.chess2.AiActivity {
- String playerName
- int color
- Button back
- ImageButton[][] boardImg
- int SIZE
- GameManager board
- boolean hasPlayed
- Dialog dialog
+ int promotedIndex
- boolean markAiMoves
- Switch markAiMovesSwitch
- TextView turnText
- Handler handler
- int depth
# void onCreate(Bundle)
# void onDestroy()
+ void onBackPressed()
+ void onClick(View)
+ boolean onTouchEvent(MotionEvent)
+ void resetImgBoard()
+ void gameEnded(int)
+ void makeAiMove()
+ int getMinimaxValue(int,int,GameManager,boolean,int,int)
+ void promotePawn(Pawn)
- void promotePawnInBoard(Pawn)
}
class com.example.chess2.Knight {
~ <<Create>> Knight(Point,int)
+ ArrayList<Point> availableMoves(GameManager)
}
class com.example.chess2.TwoPlayerRoomActivity {
- String playerName
- String roomName
- int color
- FirebaseDatabase database
- DatabaseReference moveRef
- DatabaseReference player2
- Button back
- ImageButton[][] boardImg
- int SIZE
- GameManager board
- boolean hasPlayed
- Dialog dialog
+ int promotedIndex
- Button backBtn2
- TextView pointsText
- Handler handler
# void onCreate(Bundle)
- void addRoomEventListener()
# void onDestroy()
+ void onBackPressed()
+ void onClick(View)
+ boolean onTouchEvent(MotionEvent)
+ void resetImgBoard()
+ void gameDestroyed(int)
+ void gameEnded(int)
+ void promotePawn(Pawn)
- void promotePawnInBoard(Pawn)
}
class com.example.chess2.AiHardActivity {
- String playerName
- int color
- Button back
- ImageButton[][] boardImg
- int SIZE
- GameManager board
- boolean hasPlayed
- Dialog dialog
+ int promotedIndex
- Button backBtn2
- boolean markAiMoves
- Switch markAiMovesSwitch
- TextView pointsText
- Handler handler
- int depth
# void onCreate(Bundle)
# void onDestroy()
+ void onBackPressed()
+ void onClick(View)
+ boolean onTouchEvent(MotionEvent)
+ void resetImgBoard()
+ void gameEnded(int)
+ void makeAiMove()
+ int getMinimaxValue(int,int,GameManager,boolean,int,int)
+ void promotePawn(Pawn)
- void promotePawnInBoard(Pawn)
}
class com.example.chess2.SplashActivity {
- Timer myTime
- ProgressBar prBar
- int count
# void onCreate(Bundle)
}
class com.example.chess2.SongsActivity {
- ListView lvSongs
- ArrayList<Song> songList
- ArrayList<String> songsNames
- ArrayAdapter adapter
+ {static} int mPrem
# void onCreate(Bundle)
+ void getSongs()
}
class com.example.chess2.Pawn {
~ <<Create>> Pawn(Point,int)
+ ArrayList<Point> availableMoves(GameManager)
}
class com.example.chess2.AiLevelsActivity {
- Button easyBtn
- ImageButton backBtn
- String pUserName
# void onCreate(Bundle)
+ void onClick(View)
}
class com.example.chess2.MusicService {
- {static} MediaPlayer player
- ArrayList<Song> valuesList
- int songPosn
- IBinder musicBind
+ void onCreate()
+ void onDestroy()
+ void getSongs()
+ {static} void stopPlayMusic()
+ IBinder onBind(Intent)
+ boolean onUnbind(Intent)
+ ArrayList<Song> getValuesList()
+ void initMusicPlayer()
+ void playSong()
+ void setList(ArrayList<Song>)
+ void setSong(int)
+ void pause()
+ void resume()
+ void onPrepared(MediaPlayer)
+ void onCompletion(MediaPlayer)
+ boolean onError(MediaPlayer,int,int)
}
class com.example.chess2.MusicService.MusicBinder {
~ MusicService getService()
}
class com.example.chess2.King {
- boolean isMoved
~ <<Create>> King(Point,int)
+ boolean isMoved()
+ void setMoved(boolean)
+ boolean isChecked(GameManager)
+ ArrayList<Point> availableMovesNoCastling(GameManager)
+ ArrayList<Point> availableMoves(GameManager)
}
class com.example.chess2.Point {
- int row
- int col
+ <<Create>> Point(int,int)
+ int getRow()
+ void setRow(int)
+ int getCol()
+ void setCol(int)
+ String toString()
+ boolean equals(Object)
}


com.example.chess2.OnClickListener <|.. com.example.chess2.LoginActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.LoginActivity
com.example.chess2.OnClickListener <|.. com.example.chess2.LoginSignupActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.LoginSignupActivity
com.example.chess2.OnClickListener <|.. com.example.chess2.GamesActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.GamesActivity
com.example.chess2.Piece <|-- com.example.chess2.Queen
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.RoomsActivity
com.example.chess2.OnClickListener <|.. com.example.chess2.TwoPlayerActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.TwoPlayerActivity
com.example.chess2.Piece <|-- com.example.chess2.Rook
com.example.chess2.OnClickListener <|.. com.example.chess2.MainActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.MainActivity
com.example.chess2.OnClickListener <|.. com.example.chess2.SignUpActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.SignUpActivity
com.example.chess2.Piece <|-- com.example.chess2.Bishop
com.example.chess2.OnClickListener <|.. com.example.chess2.AiActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.AiActivity
com.example.chess2.Piece <|-- com.example.chess2.Knight
com.example.chess2.OnClickListener <|.. com.example.chess2.TwoPlayerRoomActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.TwoPlayerRoomActivity
com.example.chess2.OnClickListener <|.. com.example.chess2.AiHardActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.AiHardActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.SplashActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.SongsActivity
com.example.chess2.Piece <|-- com.example.chess2.Pawn
com.example.chess2.OnClickListener <|.. com.example.chess2.AiLevelsActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess2.AiLevelsActivity
com.example.chess2.OnPreparedListener <|.. com.example.chess2.MusicService
com.example.chess2.OnErrorListener <|.. com.example.chess2.MusicService
com.example.chess2.OnCompletionListener <|.. com.example.chess2.MusicService
android.app.Service <|-- com.example.chess2.MusicService
com.example.chess2.MusicService +.. com.example.chess2.MusicService.MusicBinder
com.example.chess2.IBinder <|.. com.example.chess2.MusicService.MusicBinder
com.example.chess2.Binder <|-- com.example.chess2.MusicService.MusicBinder
com.example.chess2.Piece <|-- com.example.chess2.King
@enduml